{"version":3,"sources":["components/MessageForm.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/ChatFeed.jsx","components/LoginForm.jsx","App.js","index.js"],"names":["MessageForm","props","useState","value","setValue","chatId","creds","handleSubmit","event","preventDefault","text","trim","length","sendMessage","className","onSubmit","placeholder","onChange","target","isTyping","htmlFor","PictureOutlined","type","multiple","id","style","display","files","SendOutlined","MyMessage","message","attachments","src","file","alt","float","marginRight","color","backgroundColor","TheirMessage","lastMessage","isFirstMessageByUser","sender","username","backgroundImage","avatar","marginLeft","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","title","keys","Object","key","lastMessageKey","width","renderMessages","height","LoginForm","setUsername","password","setPassword","error","setError","e","a","authObject","axios","get","headers","localStorage","setItem","window","location","reload","required","align","App","getItem","projectID","process","userSecret","renderChatFeed","chatAppProps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1c8f3ce.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { sendMessage, isTyping } from 'react-chat-engine';\r\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons';\r\n\r\nconst MessageForm = (props) => {\r\n\r\n    const [value, setValue] = useState('');\r\n    const { chatId, creds } = props;\r\n\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value)\r\n\r\n        isTyping(props, chatId)\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const text = value.trim();\r\n\r\n        if(text.length > 0) sendMessage(creds, chatId, {text});\r\n\r\n        setValue('');\r\n    }\r\n\r\n    const handleUpload = (event) => {\r\n        sendMessage(creds, chatId, { files: event.target.files, text: ''});\r\n    }\r\n\r\n    return (\r\n        <form className='message-form' onSubmit={handleSubmit}>\r\n            <input\r\n                className='message-input'\r\n                placeholder='Send a message...'\r\n                value={value}\r\n                onChange={handleChange}\r\n                onSubmit={handleSubmit}\r\n            />\r\n            <label htmlFor='upload-button'>\r\n                <span className='image-button'>\r\n                    <PictureOutlined className='picture-icon' />\r\n                </span>\r\n            </label>\r\n            <input\r\n                type='file'\r\n                multiple={false}\r\n                id='upload-button'\r\n                style={{ display: 'none' }}\r\n                onChange={handleUpload}\r\n            />\r\n            <button type='submit' className='send-button'>\r\n                <SendOutlined className='send-icon' />\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default MessageForm;\r\n","import React from 'react';\r\n\r\nconst MyMessage = ({ message }) => {\r\n    if (message.attachments && message.attachments.length > 0) {\r\n      return (\r\n        <img\r\n          src={message.attachments[0].file}\r\n          alt=\"message-attachment\"\r\n          className=\"message-image\"\r\n          style={{ float: 'right' }}\r\n        />\r\n      );\r\n    }\r\n  \r\n    return (\r\n      <div className=\"message\" style={{ float: 'right', marginRight: '18px', color: 'white', backgroundColor: '#0c2f8f' }}>\r\n        {message.text}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default MyMessage;","import React from 'react'\r\n\r\nconst TheirMessage = ({ lastMessage, message }) => {\r\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username;\r\n  \r\n    return (\r\n      <div className=\"message-row\">\r\n        {isFirstMessageByUser && (\r\n          <div\r\n            className=\"message-avatar\"\r\n            style={{ backgroundImage: message.sender && `url(${message.sender.avatar})` }}\r\n          />\r\n        )}\r\n        {message.attachments && message.attachments.length > 0\r\n          ? (\r\n            <img\r\n              src={message.attachments[0].file}\r\n              alt=\"message-attachment\"\r\n              className=\"message-image\"\r\n              style={{ marginLeft: isFirstMessageByUser ? '4px' : '48px' }}\r\n            />\r\n          )\r\n          : (\r\n            <div className=\"message\" style={{ float: 'left', backgroundColor: '#7691cc', marginLeft: isFirstMessageByUser ? '4px' : '48px' }}>\r\n              {message.text}\r\n            </div>\r\n          )}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default TheirMessage;\r\n","// import { render } from '@testing-library/react';\r\nimport React from 'react';\r\nimport MessageForm from './MessageForm';\r\nimport MyMessage from './MyMessage';\r\nimport TheirMessage from './TheirMessage';\r\n\r\nconst ChatFeed = (props) => {\r\n\r\n    const {chats, activeChat, userName, messages} = props;\r\n\r\n    const chat = chats && chats[activeChat];\r\n\r\n    const renderReadReceipts = (message, isMyMessage) => {\r\n        return chat.people.map((person, index) => person.last_read === message.id && (\r\n            <div\r\n                key={`read_${index}`}\r\n                className='read-receipt'\r\n                style={{float: isMyMessage ? 'right' : 'left', backgroundImage: `url(${person?.person?.avatar})` }}\r\n            />\r\n        ))\r\n    }\r\n    \r\n    const renderMessages = () => {\r\n        const keys = Object.keys(messages);\r\n\r\n        return keys.map((key,index) => {\r\n            const message = messages[key];\r\n            const lastMessageKey = index === 0 ? null : keys[index-1];\r\n            const isMyMessage = userName === message.sender.username;\r\n\r\n            return (\r\n                <div key={`msg_${index}`} style={{width: '100%'}}>\r\n                    <div className='message-block'>\r\n                        {\r\n                            isMyMessage ? <MyMessage message={message} /> : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />\r\n                        }\r\n                    </div>\r\n                    <div className='read-receipts' style={{marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px'}}>\r\n                        {renderReadReceipts(message, isMyMessage)}\r\n                    </div>\r\n                </div>\r\n            )\r\n\r\n        })\r\n    }\r\n\r\n    if(!chat) return 'Loading...';\r\n\r\n    return (\r\n        <div className='chat-feed'>\r\n            <div className='chat-title-container'>\r\n                <div className='chat-title'>{chat ?.title}</div>\r\n                <div className='chat-subtitle'>\r\n                    {chat.people.map((person) => `${person.person.username}`)}\r\n                </div>\r\n            </div>\r\n            {renderMessages()}\r\n            <div style={{height: '100px'}} />\r\n            <div className='message-form-container'>\r\n                <MessageForm {...props} chatId={activeChat} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatFeed;\r\n","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst LoginForm = () => {\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [error, setError] = useState('');\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const authObject = { 'Project-ID': 'b7799fa4-cdab-4dff-b1f8-0c19f4a34cf6', 'User-Name': username, 'User-Secret': password }\r\n\r\n        try {\r\n            await axios.get('https://api.chatengine.io/chats', {headers: authObject});\r\n\r\n            // Login successful => chatengine loads messages\r\n\r\n            localStorage.setItem('username', username);\r\n            localStorage.setItem('password', password);\r\n\r\n            window.location.reload();\r\n\r\n        } catch (error) {\r\n            // Error => try again with correct info\r\n            setError('Sheeeeesh, Incorrect credentials');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='wrapper'>\r\n            <div className='form'>\r\n                <h1 className='title'>Chat Application</h1>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input type='text' value={username} onChange={(e) => setUsername(e.target.value)} className='input' placeholder='Username' required />\r\n                    <input type='password' value={password} onChange={(e) => setPassword(e.target.value)} className='input' placeholder='Password' required />\r\n                    <div align='center'>\r\n                        <button type='submit' className='button'>\r\n                            <span>Start Chatting!</span>\r\n                        </button>\r\n                    </div>\r\n                    <div className='cent'>\r\n                        <h2 className='error'>{error}</h2>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm\r\n","import { ChatEngine } from 'react-chat-engine';\r\n\r\nimport ChatFeed from './components/ChatFeed';\r\nimport LoginForm from './components/LoginForm';\r\n\r\nimport './App.css';\r\n\r\n\r\nconst App = () => {\r\n\r\n    if(!localStorage.getItem('username')) return <LoginForm />\r\n\r\n    return(\r\n        <ChatEngine \r\n            height='100vh'\r\n            projectID={process.env.REACT_APP_PROJECT}\r\n            userName={localStorage.getItem('username')}\r\n            userSecret={localStorage.getItem('password')}\r\n            renderChatFeed={(chatAppProps) => <ChatFeed {...chatAppProps} /> }\r\n        />\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}